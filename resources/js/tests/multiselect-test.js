/**
 * Test pour le composant multiselect
 *
 * Comment utiliser ce test:
 * 1. Ouvrez la console de votre navigateur sur une page contenant le multiselect
 * 2. Copiez et collez le contenu de ce fichier dans la console
 * 3. Ex√©cutez le code pour voir les r√©sultats des tests
 */

function testMultiselect() {
    console.log('üß™ Test du composant multiselect...');

    // Identifiez un multiselect dans la page
    const multiselectId = document.querySelector('.multiselect-container')?.id?.replace('_container', '');

    if (!multiselectId) {
        console.error('‚ùå Aucun composant multiselect trouv√© dans la page');
        return;
    }

    console.log(`‚úì Composant multiselect trouv√© avec l'identifiant: ${multiselectId}`);

    // R√©cup√©rez les √©l√©ments du DOM
    const container = document.getElementById(`${multiselectId}_container`);
    const input = document.getElementById(`${multiselectId}_input`);
    const hiddenInput = document.getElementById(`${multiselectId}_values`);
    const dropdown = document.getElementById(`${multiselectId}_dropdown`);
    const selectedItemsContainer = document.getElementById(`${multiselectId}_selected_items`);

    // V√©rifiez que tous les √©l√©ments existent
    console.log('V√©rification des √©l√©ments DOM:');
    console.log(`- Container: ${container ? '‚úì' : '‚ùå'}`);
    console.log(`- Input: ${input ? '‚úì' : '‚ùå'}`);
    console.log(`- Hidden input: ${hiddenInput ? '‚úì' : '‚ùå'}`);
    console.log(`- Dropdown: ${dropdown ? '‚úì' : '‚ùå'}`);
    console.log(`- Selected items container: ${selectedItemsContainer ? '‚úì' : '‚ùå'}`);

    if (!container || !input || !hiddenInput || !dropdown || !selectedItemsContainer) {
        console.error('‚ùå Un ou plusieurs √©l√©ments manquants');
        return;
    }

    // Obtenez les valeurs actuellement s√©lectionn√©es
    let currentValues = [];
    try {
        currentValues = JSON.parse(hiddenInput.value || '[]');
        console.log(`‚úì Valeurs actuelles: ${JSON.stringify(currentValues)}`);
    } catch (e) {
        console.error('‚ùå Erreur lors de la lecture des valeurs actuelles', e);
    }

    // Test d'ouverture du dropdown
    console.log('Test de l\'ouverture du dropdown:');
    input.click();
    console.log(`- Dropdown visible: ${dropdown.classList.contains('hidden') ? '‚ùå' : '‚úì'}`);

    // Test de fermeture du dropdown
    console.log('Test de la fermeture du dropdown:');
    document.body.click();
    console.log(`- Dropdown cach√©: ${dropdown.classList.contains('hidden') ? '‚úì' : '‚ùå'}`);

    // Test de la liaison avec Livewire
    console.log('V√©rification de la liaison Livewire:');
    console.log(`- wire:model attach√©: ${hiddenInput.hasAttribute('wire:model.live') ? '‚úì' : '‚ùå'}`);

    // Test de la fonctionnalit√© de r√©initialisation
    console.log('Test de la fonctionnalit√© de r√©initialisation:');
    if (window.multiselect && window.multiselect[multiselectId]) {
        // Sauvegardez les valeurs actuelles
        const originalValues = JSON.parse(hiddenInput.value || '[]');

        // R√©initialisez
        window.multiselect[multiselectId].reset();

        // V√©rifiez que les valeurs ont √©t√© r√©initialis√©es
        const newValues = JSON.parse(hiddenInput.value || '[]');
        console.log(`- R√©initialisation des valeurs: ${newValues.length === 0 ? '‚úì' : '‚ùå'}`);

        // Restaurez les valeurs d'origine
        window.multiselect[multiselectId].updateSelectedValues(originalValues);
        console.log(`- Restauration des valeurs d'origine: ${hiddenInput.value === JSON.stringify(originalValues) ? '‚úì' : '‚ùå'}`);
    } else {
        console.error('‚ùå Les m√©thodes du multiselect ne sont pas expos√©es correctement');
    }

    console.log('üéâ Tests termin√©s!');
}

// Ex√©cutez les tests
testMultiselect();
